/*
 * Copyright 2000-2016 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
  repositories {
    maven { url 'https://plugins.gradle.org/m2' }
    mavenCentral()
    jcenter()
  }
  dependencies {
    classpath "com.github.rodm:gradle-teamcity-plugin:0.9.1"
  }
}

ext.teamcityVersion = hasProperty('teamcity.version') ? property('teamcity.version') : '10.0.2'

ext.teamcityDir = hasProperty('teamcity.dir') ? property('teamcity.dir') : "$rootDir/teamcity/app"
ext.teamcityDataDir = "$rootDir/teamcity/data"
ext.teamcityJavaHome = System.properties['java.home']

ext.awsSDKVersion = hasProperty('aws.sdk.version') ? property('aws.sdk.version') : '1.11.44'

ext.javaVersion = hasProperty('plugin.java.version') ? property('plugin.java.version') : '1.7'

apply plugin: 'idea'
idea {
  project {
    vcs = 'Git'
  }
}

subprojects {
  group = 'jetbrains.buildServer.elasticbeanstalk'
}

configure(allprojects - project(':build')) {
  apply plugin: 'jacoco'

  repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
    maven { url "http://repo1.maven.org/maven2/" }
    maven { url = 'http://repository.jetbrains.com/all' }
  }

}

// Only report code coverage for certain projects
def coveredProjects = (subprojects - project(':build'))

configure(coveredProjects) {
  apply plugin: 'java'

  sourceCompatibility = javaVersion
  targetCompatibility = javaVersion

  tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
  }

  test {
    useTestNG()
    testLogging.showStandardStreams = true
  }
}

task codeCoverageReport(type: JacocoReport) {
  executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

  coveredProjects.each {
    sourceSets it.sourceSets.main
  }

  reports {
    xml.enabled true
    xml.destination "${buildDir}/reports/jacoco/report.xml"
    html.enabled false
    csv.enabled false
  }
}

codeCoverageReport.dependsOn {
  coveredProjects*.test
}

configurations { codacy }

repositories {
  maven { url "https://jitpack.io" }
  maven { url "http://dl.bintray.com/typesafe/maven-releases" }
  maven { url 'https://plugins.gradle.org/m2' }
  mavenCentral()
  jcenter()
}

dependencies {
  codacy 'com.github.codacy:codacy-coverage-reporter:1.0.13'
}

task codacy(type: JavaExec, dependsOn: codeCoverageReport) {
  group = 'Coverage reports'
  description = 'Uploads the aggregated coverage report to Codacy'
  onlyIf { System.env.'CI' }
  main = "com.codacy.CodacyCoverageReporter"
  classpath = configurations.codacy
  args = [
    "-l",
    "Java",
    "-r",
    "${buildDir}/reports/jacoco/report.xml"
  ]
}
